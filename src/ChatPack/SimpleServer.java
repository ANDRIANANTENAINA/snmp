package ChatPack;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SimpleServer.java
 *
 * Created on May 9, 2010, 9:08:12 PM
 */

/**
 *
 * @author roylee
 */

import java.net.*;
import java.io.*;
import java.util.Vector;
import javax.swing.JOptionPane;
public class SimpleServer extends javax.swing.JFrame {
private ServerSocket server;
private Socket tunnel;
private static int PORT_NUMBER = 19000;
private Vector<HandleAClient> clients = new Vector<HandleAClient>();
/** Creates new form SimpleServer */
    public SimpleServer() {
        initComponents();
        setVisible(true);
        setLocationRelativeTo(null);
        initServer();
    }
    public void initServer(){
        try {
	    server = new ServerSocket(PORT_NUMBER);// open port
        }catch (IOException e){
            JOptionPane.showMessageDialog(null, "Could not open port " + PORT_NUMBER);
//            e.printStackTrace();
            System.exit(1);
        }
        try{
            while(true){// keep on accept and listening for client~
                tunnel = server.accept();//keep on listening! it holds here until it listened con from client
                clients.add(new HandleAClient(tunnel,clients));
                clients.get(clients.size()-1).start();
            }
        }catch(IOException ex){//input error
            JOptionPane.showMessageDialog(null, "Accept failed: " + PORT_NUMBER);
            ex.printStackTrace();
            System.exit(1);
        }finally {
            try {
	        tunnel.close();
	    }catch(IOException ioe) {
		ioe.printStackTrace();
	    }
	}
    }

    class HandleAClient extends Thread{   //implements Runnable{// tjs is distinct client class!
    //it can be d identity of each client handled by server! e.g: name,ip add, clientNo
    private DataInputStream fromClient = null;
    private DataOutputStream toClient = null;
    private Socket tunnel;
    private String message;
    private String name = null;
    private Vector<HandleAClient> friends = null;

        public HandleAClient(Socket tunnel,Vector<HandleAClient> friends){
            this.tunnel = tunnel;
            this.friends = friends;
        }
        @Override
        public void run(){
            try{//initialize input,output. one time is enuf!
                fromClient = new DataInputStream(tunnel.getInputStream());
                toClient = new DataOutputStream(tunnel.getOutputStream());
                name = fromClient.readUTF();
                toClient.writeUTF("\tHello  "+name+"!  Welcome  to  ROyLeE's  Chat  Room.\n\tTo  leave  enter  /quit  in  a  new  line");
                toClient.writeUTF("****************************************************************************************************************\n");
                for(HandleAClient aFriend: friends)
                    if(aFriend!= this)
                        aFriend.toClient.writeUTF("\t*** A new user "+name.toUpperCase()+" entered the chat room !!! ***" );
            }catch(Exception ex){
                ex.printStackTrace();
            }

            while(true){ //keep on receive input from client
                try{
                    message = fromClient.readUTF();
                    if(message.equals("quit"))break;

                    for(HandleAClient aFriend: friends){
                        aFriend.toClient.writeUTF("<"+name+"> " + message);
                        aFriend.toClient.flush();
                    }
                }catch(IOException ex){
                    ex.printStackTrace();
                }
            }//while end

            for(HandleAClient aFriend: friends){
                int i = 0;
                if(aFriend == this){
                    friends.remove(i);
                    break;}
                i++;
            }
            for(HandleAClient aFriend: friends){
                try{
                    aFriend.toClient.writeUTF("\t*** The user "+ name +" is leaving the chat room !!! ***" );
                }catch(IOException ioe){
                    ioe.printStackTrace();
                }
            }
        }

    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtaDisplay = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jtaDisplay.setColumns(20);
        jtaDisplay.setRows(5);
        jScrollPane1.setViewportView(jtaDisplay);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        new SimpleServer();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jtaDisplay;
    // End of variables declaration//GEN-END:variables

}
